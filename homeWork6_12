using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace homeWork6_12_zoo_last
{
    class Program
    {
        private const string CommandShowLions = "1";
        private const string CommandShowGiraffes = "2";
        private const string CommandShowBears = "3";
        private const string CommandShowRabbits = "4";
        private const string CommandShowHippopotamuses = "5";
        private const string CommandExit = "6";

        static void Main(string[] args)
        {
            Console.WriteLine("Мы рады приветствовать вас в нашем зоопарке. У нас есть различные вольеры с животными.\nИ вы можете подойти к ним поближе, чтобы познакомиться с их обитателями.\n");
            Zoo zoo = new Zoo();
            string message = "";

            zoo.FillZoo();

            while (message != "Exit")
            {
                zoo.ShowAnimals();
                Console.ReadKey();
            }
        }
    }

    class Zoo
    {
        private static readonly Random _random = new Random();
        private List<Aviary> _aviaries = new List<Aviary>();
       
        public void FillZoo()
        {
            _aviaries.Add(new Aviary(new Lion()));
            _aviaries.Add(new Aviary(new Geraffe()));
            _aviaries.Add(new Aviary(new Bear()));
            _aviaries.Add(new Aviary(new Rabbit()));
            _aviaries.Add(new Aviary(new Hippopotamus()));
        }

        public void ShowAnimals()
        {
            _aviaries[0].ShowIndividuals();
            _aviaries[0].ShowAviary();
            Console.WriteLine(_aviaries[0].Animal.Voice);
        }
    }

    class Aviary
    {
        private static readonly Random _random = new Random();
        private List<Animal> _aviary = new List<Animal>();

        public Animal Animal { get; private set; }
        public int CountMale
        {
            get
            {
                int countMale = 0;

                foreach (Animal animal in _aviary)
                {
                    if (animal.Gender == Gender.Male)
                    {
                        countMale++;
                    }
                }
                return countMale;
            }
        }
        public int CountFemale
        {
            get
            {
                int countFemale = 0;

                foreach (Animal animal in _aviary)
                {
                    if (animal.Gender == Gender.Female)
                    {
                        countFemale++;
                    }
                }
                return countFemale;
            }
        }
        public int NumberIndividuals
        {
            get
            {
                return CountMale + CountFemale;
            }
        }

        public Aviary(Animal animal)
        {
            Animal = animal;
            Fill(_aviary, animal);
        }

        public void Fill(List<Animal> aviaries, Animal animal)
        {
            int minCountAnimals = 4;
            int maxCountAnimals = 12;
            int countAnimals = _random.Next(minCountAnimals, maxCountAnimals);

            for (int i = 0; i < countAnimals; i++)
            {
                aviaries.Add(animal);
            }
        }

        public void ShowAviary()
        {
            foreach (var animal in _aviary)
            {
                Console.WriteLine("самцы - " + CountMale + " шт, самки - " + CountFemale + ", общее кол - во - " + NumberIndividuals + " шт.");
            }
        }
        
        public void ShowIndividuals()
        {
            foreach(var animal in _aviary)
            {
                Console.WriteLine(animal.Name + animal.Gender);
            }
        }
    }

    enum Gender
    {
        Male, Female
    }

    abstract class Animal
    {
        private static readonly Random _random = new Random();
        private int _minNumber = 0;
        private int _maxNumber = 2;

        public Gender Gender { get; protected set; }
        public string Name { get; protected set; }
        public string Voice { get; protected set; }

        public Animal()
        {
            Gender = (Gender)_random.Next(_minNumber, _maxNumber);          
        }        
    }

    class Lion : Animal
    {
        public Lion()
        {
            Name = "Лев";
            Voice = "Грозно рычит... Аааааррррррр!";
        }
    }

    class Geraffe : Animal
    {
        public Geraffe()
        {
            Name = "Жираф";
            Voice = "Длинный протяжный Аааааааа... Что - то очень странное!";
        }
    }

    class Bear : Animal
    {
        public Bear()
        {
            Name = "Медведь";
            Voice = "Мммррррррраааа... Наверное последний звук, который вы услышите, если встретите его обладателя в диком лесу.";
        }
    }

    class Rabbit : Animal
    {
        public Rabbit()
        {
            Name = "Кролик";
            Voice = "Очень мило урчат... Такие заечкиии!";
        }
    }

    class Hippopotamus : Animal
    {
        public Hippopotamus()
        {
            Name = "Бегемот";
            Voice = "Грозно похрюкивает... Иногда дико ревет, особенно когда летит в замес!";
        }
    }
}
