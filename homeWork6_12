using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace homeWork6_12_zoo_last
{
    class Program
    {
        private const string CommandShowAviary = "1";
        private const string CommandExit = "2";

        static void Main(string[] args)
        {
            Zoo zoo = new Zoo();
            bool isWork = true;

            zoo.Fill();

            Console.WriteLine("Мы рады приветствовать вас в нашем зоопарке. У нас есть " + zoo.GetCountAviaries() + " вольеров с разными обитателями.\nВы можете подойти поближе, чтобы познакомиться с ними!\n");

            while (isWork)
            {
                Console.WriteLine(CommandShowAviary + " - Подойти к вольерам\n" + CommandExit + " - выход");
                string message = Console.ReadLine();

                switch (message)
                {
                    case CommandShowAviary:
                        zoo.ShowAviary();
                        break;

                    case CommandExit:
                        isWork = false;
                        break;

                    default:
                        Console.WriteLine("Такой команды нет! Повторите ввод!");
                        break;
                }
            }
        }
    }

    class Zoo
    {
        private List<Aviary> _aviaries = new List<Aviary>();

        public int GetCountAviaries()
        {
            return _aviaries.Count;
        }

        public void Fill()
        {
            _aviaries.Add(new Aviary(TypeAnimals.Lion));
            _aviaries.Add(new Aviary(TypeAnimals.Geraffe));
            _aviaries.Add(new Aviary(TypeAnimals.Bear));
            _aviaries.Add(new Aviary(TypeAnimals.Rabbit));
            _aviaries.Add(new Aviary(TypeAnimals.Hippopotamus));
        }

        public void ShowAviary()
        {
            Console.WriteLine("Введите номер вольера к которому хотите подойти:");
            int number = Convert.ToInt32(Console.ReadLine()) - 1;

            if (number < _aviaries.Count && number >= 0)
            {
                Console.WriteLine("В этом вольере находятся:\n");

                ShowAnimals(number);

                Console.WriteLine("\nДля продолжения нажмите любую клавишу");
                Console.ReadKey();
                Console.Clear();
            }
            else
            {
                Console.WriteLine("Такого вольера нет!\n");
            }
        }

        private void ShowAnimals(int number)
        {
            _aviaries[number].ShowIndividuals();
            _aviaries[number].ShowAviary();

            Console.WriteLine(_aviaries[number].Voice);
        }
    }

    class Aviary
    {
        private static readonly Random _random = new Random();
        private List<Animal> _aviary = new List<Animal>();

        public string Voice
        {
            get
            {
                if (_aviary.Count != 0)
                {
                    return _aviary[0].Voice;
                }
                else
                {
                    return "";
                }
            }
        }

        public int CountMale
        {
            get
            {
                int countMale = 0;

                foreach (Animal animal in _aviary)
                {
                    if (animal.Gender == Gender.Male)
                    {
                        countMale++;
                    }
                }
                return countMale;
            }
        }

        public int CountFemale
        {
            get
            {
                int countFemale = 0;

                foreach (Animal animal in _aviary)
                {
                    if (animal.Gender == Gender.Female)
                    {
                        countFemale++;
                    }
                }
                return countFemale;
            }
        }

        public int NumberIndividuals
        {
            get
            {
                return CountMale + CountFemale;
            }
        }

        public Aviary(TypeAnimals typeAnimals)
        {
            Fill(_aviary, typeAnimals);
        }

        public void ShowAviary()
        {
            Console.WriteLine("самцы - " + CountMale + " шт, самки - " + CountFemale + ", общее кол - во - " + NumberIndividuals + " шт.\n");
        }

        public void ShowIndividuals()
        {
            foreach (var animal in _aviary)
            {
                Console.WriteLine(animal.Name + " - " + animal.Gender);
            }
        }

        private void Fill(List<Animal> aviaries, TypeAnimals typeAnimals)
        {
            int minCountAnimals = 4;
            int maxCountAnimals = 12;
            int countAnimals = _random.Next(minCountAnimals, maxCountAnimals);

            for (int i = 0; i < countAnimals; i++)
            {
                switch (typeAnimals)
                {
                    case TypeAnimals.Lion:
                        aviaries.Add(new Lion());
                        break;

                    case TypeAnimals.Geraffe:
                        aviaries.Add(new Geraffe());
                        break;

                    case TypeAnimals.Bear:
                        aviaries.Add(new Bear());
                        break;

                    case TypeAnimals.Rabbit:
                        aviaries.Add(new Rabbit());
                        break;

                    case TypeAnimals.Hippopotamus:
                        aviaries.Add(new Hippopotamus());
                        break;
                }
            }
        }
    }

    public enum TypeAnimals
    {
        Lion,
        Geraffe,
        Bear,
        Rabbit,
        Hippopotamus
    }

    public enum Gender
    {
        Male,
        Female
    }

    abstract class Animal
    {
        private static readonly Random _random = new Random();
        private int _minNumber = 0;
        private int _maxNumber = 2;

        public string Name { get; protected set; }
        public string Voice { get; protected set; }
        public Gender Gender { get; protected set; }

        public Animal()
        {
            Gender = (Gender)_random.Next(_minNumber, _maxNumber);
        }
    }

    class Lion : Animal
    {
        public Lion()
        {
            Name = "Лев";
            Voice = "Грозно рычит... Аааааррррррр!";
        }
    }

    class Geraffe : Animal
    {
        public Geraffe()
        {
            Name = "Жираф";
            Voice = "Длинный протяжный Аааааааа... Что - то очень странное!";
        }
    }

    class Bear : Animal
    {
        public Bear()
        {
            Name = "Медведь";
            Voice = "Мммррррррраааа... Наверное последний звук, который вы услышите, если встретите его обладателя в диком лесу.";
        }
    }

    class Rabbit : Animal
    {
        public Rabbit()
        {
            Name = "Кролик";
            Voice = "Очень мило урчат... Такие заечкиии!";
        }
    }

    class Hippopotamus : Animal
    {
        public Hippopotamus()
        {
            Name = "Бегемот";
            Voice = "Грозно похрюкивает... Иногда дико ревет, особенно когда летит в замес!";
        }
    }
}
