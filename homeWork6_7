using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace homeWork6_7
{
    class Program
    {
        private const string CommandCreateAndSendTrain = "1";
        private const string CommandShowAllTrain = "2";
        private const string CommandExit = "3";
        static void Main(string[] args)
        {
            Console.WriteLine("Это программа создает маршрут для движения поезда,\nпродает билеты, оптимально заполняет вагоны и отправляет состав в путь!");
            Console.WriteLine();
            bool isWork = true;
            StationMaster station = new StationMaster();

            while (isWork)
            {
                Console.WriteLine("Меню программы:");
                Console.WriteLine("Создать и отправить поезд - " + CommandCreateAndSendTrain + "\nПоказать все поезда - " + CommandShowAllTrain + "\nВыход - " + CommandExit);
                string message = Console.ReadLine();

                switch (message)
                {
                    case CommandCreateAndSendTrain:
                        station.SendTrain();
                        break;

                    case CommandShowAllTrain:
                        station.ShowAllTrains();
                        break;

                    case CommandExit:
                        isWork = false;
                        break;

                    default:
                        Console.WriteLine("Не верный ввод. Такой команды нет!");
                        break;
                }
            }
        }
    }

    class StationManager
    {
        private Random _random = new Random();
        public int CountPeople { get; private set; }

        public int SellTickets()
        {
            int minCount = 150;
            int maxCount = 350;
            CountPeople = _random.Next(minCount, maxCount);
            return CountPeople;
        }
    }

    class StationMaster
    {
        private StationManager _stationManager = new StationManager();
        private List<Train> _trains = new List<Train>();
        private Wagon _wagon = new Wagon();
        public string DeparturePoint { get; private set; }
        public string DestinationPoint { get; private set; }

        public void SendTrain()
        {
            CreateDirection();
            _stationManager.SellTickets();
            Console.WriteLine("Было продано - " + _stationManager.CountPeople + " билетов.");
            _wagon.SetCapacityWagons();
            _wagon.CreateWagons(_stationManager);
            CreateTrain();
            Console.WriteLine("Поезд отправляется в путь! Счастливого пути!");
            Console.WriteLine("Для продолжения работы нажмите любую клавишу");
            Console.ReadKey();
            Console.Clear();
        }

        public void ShowAllTrains()
        {
            for (int i = 0; i < _trains.Count; i++)
            {
                _trains[i].Showinfo();
            }
            Console.WriteLine();
        }

        private void CreateDirection()
        {
            Console.WriteLine("Создание нового направления!");
            bool isWork = true;

            while (isWork)
            {
                Console.WriteLine("Введите станцию отправления:");
                string pointA = Console.ReadLine();
                Console.WriteLine("Введите станцию конца маршрута:");
                string pointB = Console.ReadLine();

                if (pointA == null || pointB == null)
                {
                    Console.WriteLine("Введены не корректные данные!");
                    Console.WriteLine("Введите станции заного. Для продолжения нажмите любую клавишу.");
                    Console.ReadKey();
                }
                else
                {
                    DeparturePoint = pointA;
                    DestinationPoint = pointB;
                    Console.WriteLine("Направление создано успешно");
                    isWork = false;
                }
            }
        }

        private void CreateTrain()
        {
            _trains.Add(new Train(DeparturePoint, DestinationPoint, _wagon.CountWagons, _wagon.CapacityWagons));
        }

    }

    class Train
    {
        public string DeparturePoint { get; private set; }
        public string DestinationPoint { get; private set; }
        public int CountWagons { get; private set; }
        public int CapacityWagon { get; private set; }

        public Train(string departurePoint, string destinationPoint, int countWagons, int capacityWagon)
        {
            DeparturePoint = departurePoint;
            DestinationPoint = destinationPoint;
            CountWagons = countWagons;
            CapacityWagon = capacityWagon;
        }

        public void Showinfo()
        {
            Console.WriteLine("Станция отправления - " + DeparturePoint + ", станция прибытия - " + DestinationPoint + "|| кол - во вагонов - " + CountWagons + ", кол - во мест в вагоне " + CapacityWagon);
        }
    }

    class Wagon
    {
        private int _minimumCapacity = 20;
        private int _maximumCapacity = 36;
        public int CountWagons { get; private set; }
        public int CapacityWagons { get; private set; }

        public void SetCapacityWagons()
        {
            Console.WriteLine("\nКонфигуратор вместимости вагона:");
            Console.WriteLine("Вы можете сами задать вместимость вагонов.");
            Console.WriteLine("Минимальная вместимость вагона - " + _minimumCapacity + ", максимальная - " + _maximumCapacity);
            bool isWork = true;

            while (isWork)
            {
                Console.WriteLine("Введите желаемую вместимость:");
                int userCapacity = UserUtilities.ReadPositiveInt();

                if (userCapacity < _minimumCapacity || userCapacity > _maximumCapacity)
                {
                    Console.WriteLine("Вы ввели не допустимое кол - во мест! Задайте кол - во мест еще раз!");
                    Console.WriteLine("Для продолжения нажмите любую клавишу");
                    Console.ReadKey();
                }
                else
                {
                    Console.WriteLine("Конфигурация вместимости создана!");
                    CapacityWagons = userCapacity;
                    isWork = false;
                }
            }
        }

        public void CreateWagons(StationManager stationManager)
        {
            Console.WriteLine("\nКонфигуратор количества вагонов:");
            Console.WriteLine("Программа сама посчитает неоходимое кол - во вагонов для перевозки всех пассажиров");
            Console.WriteLine("Для продожения нажмите любую клавишу.");
            Console.ReadKey();
            int countPeople = stationManager.CountPeople;
            int countWagons = countPeople / CapacityWagons;

            if (countPeople % CapacityWagons > 0)
            {
                countWagons++;
            }
            Console.WriteLine("В " + countWagons + " вагонов поместятся все пассажиры.");
            CountWagons = countWagons;
        }
    }

    static class UserUtilities
    {
        public static int ReadPositiveInt()
        {
            int resalt = 0;
            bool isWork = true;

            while (isWork)
            {
                string userInput = Console.ReadLine();
                bool isSuccess = int.TryParse(userInput, out int inputNumber);

                if (inputNumber >= 0 && isSuccess == true)
                {
                    resalt = inputNumber;
                    isWork = false;
                }
                else
                {
                    Console.WriteLine("Не корректный ввод. Введите положительное число!");
                }
            }
            return resalt;
        }
    }
}
