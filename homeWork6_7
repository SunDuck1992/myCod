using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace homeWork6_7
{
    class Program
    {
        private const string StartProgramm = "1";
        private const string ShowAllTrain = "2";
        private const string ExitProgramm = "3";
        static void Main(string[] args)
        {
            Console.WriteLine("Это программа создает маршрут для движения поезда,\nпродает билеты, оптимально заполняет вагоны и отправляет состав в путь!");
            Console.WriteLine();
            bool isWork = true;
            Station station = new Station();

            while (isWork)
            {
                Console.WriteLine("Меню программы:");
                Console.WriteLine("Подготовить поезд к отправке - " + StartProgramm + "\nПоказать все поезда - " + ShowAllTrain + "\nВыход - " + ExitProgramm);
                string message = Console.ReadLine();

                switch (message)
                {
                    case StartProgramm:
                        station.Work();
                        break;

                    case ShowAllTrain:
                        station.ShowDirection();
                        break;

                    case ExitProgramm:
                        isWork = false;
                        break;

                    default:
                        Console.WriteLine("Не верный ввод. Такой команды нет!");
                        break;
                }
            }
        }
    }

    class Direction
    {
        public string DeparturePoint { get; private set; }
        public string DestinationPoint { get; private set; }

        public Direction(string departurePoint, string destinationPoint)
        {
            DeparturePoint = departurePoint;
            DestinationPoint = destinationPoint;
        }

        public void ShowInfo()
        {
            Console.WriteLine("Станция отправления - " + DeparturePoint + ", станция прибытия - " + DestinationPoint + " - отправлен");
        }
    }

    class StationManager
    {
        private Random _random = new Random();
        private int _countPeople;

        public int GetPeople()
        {
            int minCount = 150;
            int maxCount = 350;
            int countPeople = _random.Next(minCount, maxCount);
            _countPeople = countPeople;
            return _countPeople;
        }
    }

    class Station
    {
        private List<Direction> _directions = new List<Direction>();
        private Train _train = new Train();
        private StationManager _passengers = new StationManager();
        public string DeparturePoint { get; private set; }
        public string DestinationPoint { get; private set; }

        public void Work()
        {
            if (TryCreationDirection())
            {
                SellTickets();
                FillDirection();

                if (_train.Create())
                {
                    Console.WriteLine("Поезд отправляется в путь! Счастливого пути!");
                    Console.WriteLine("Для продолжения работы нажмите любую клавишу");
                    Console.ReadKey();
                    Console.Clear();
                }
            }
        }

        public void ShowDirection()
        {
            if (_directions.Count > 0)
            {
                for (int i = 0; i < _directions.Count; i++)
                {
                    Console.Write(i + 1 + " ");
                    _directions[i].ShowInfo();
                }
            }
            else
            {
                Console.WriteLine("База данных пока пуста! Отправьте поезд!");
            }
            Console.WriteLine();
            Console.WriteLine("Для продолжения работы нажмите любую клавишу");
            Console.ReadKey();
            Console.Clear();
        }

        public bool TryCreationDirection()
        {
            string pointA;
            string pointB;
            Console.WriteLine("Создание нового направления! Введите станцию отправления:");
            pointA = Console.ReadLine();
            Console.WriteLine("Введите станцию конца маршрута:");
            pointB = Console.ReadLine();

            if (pointA == null || pointB == null)
            {
                Console.WriteLine("Введены не корректные данные!");
                return false;
            }
            else
            {
                DeparturePoint = pointA;
                DestinationPoint = pointB;
                Console.WriteLine("Направление создано успешно");
                return true;
            }
        }

        private int SellTickets()
        {
            int countTickets = _passengers.GetPeople();
            Console.WriteLine("Станция отправления - " + DeparturePoint + ", станция прибытия - " + DestinationPoint + " - в продаже");
            Console.WriteLine();
            Console.WriteLine("Было продано - " + countTickets + " билетов");
            return countTickets;
        }

        private void FillDirection()
        {
            Direction direction = new Direction(DeparturePoint, DestinationPoint);
            _directions.Add(direction);
            Console.WriteLine();
        }
    }

    class Train
    {
        private Wagon _wagons = new Wagon();

        public bool Create()
        {
            if (_wagons.TrySetCapacityWagons() == true)
            {
                if (_wagons.TryCreateWagons() == true)
                {
                    Console.WriteLine("\nСостав сформирован! Вместимость вагонов - " + _wagons.CapacityWagons + ", количество вагонов - " + _wagons.CountWagons);
                    return true;
                }
            }
            return false;
        }
    }

    class Wagon
    {
        private StationManager _passengers = new StationManager();
        private int _minimumCountWagons = 5;
        private int _maximumCountWagons = 20;
        private int _minimumCapacity = 20;
        private int _maximumCapacity = 36;
        public int CountWagons { get; private set; }
        public int CapacityWagons { get; private set; }

        public bool TrySetCapacityWagons()
        {
            Console.WriteLine("\nКонфигуратор вместимости вагона:");
            Console.WriteLine("Вы можете сами задать вместимость вагонов.");
            Console.WriteLine("Минимальная вместимость вагона - " + _minimumCapacity + ", максимальная - " + _maximumCapacity);
            bool isWork = true;

            while (isWork)
            {
                Console.WriteLine("Введите желаемую вместимость:");
                int userCapacity = UserUtilities.ReadPositiveInt();

                if (userCapacity < _minimumCapacity || userCapacity > _maximumCapacity)
                {
                    Console.WriteLine("Вы ввели не допустимое кол - во мест!");
                }
                else
                {
                    Console.WriteLine("Конфигурация вместимости создана!");
                    CapacityWagons = userCapacity;
                    return true; ;
                }
            }
            return false;
        }

        public bool TryCreateWagons()
        {
            Console.WriteLine("\nКонфигуратор количества вагонов:");
            Console.WriteLine("Минимальное кол - во вагонов - " + _minimumCountWagons + ", максимальное - " + _maximumCountWagons);
            int countPeople = _passengers.GetPeople();
            int countWagons = countPeople / CapacityWagons;

            if (countPeople % CapacityWagons > 0)
            {
                countWagons++;
            }

            if (countWagons < _minimumCountWagons || countWagons > _maximumCountWagons)
            {
                Console.WriteLine("Не возможно создать такое кол - во  вагонов! Слишком мало пассажиров!");
                return false;
            }
            else
            {
                Console.WriteLine("В " + countWagons + " вагонов поместятся все пассажиры.");
                CountWagons = countWagons;
                return true;
            }
        }
    }

    static class UserUtilities
    {
        public static int ReadPositiveInt()
        {
            int resalt = 0;
            bool isWork = true;

            while (isWork)
            {
                string userInput = Console.ReadLine();
                bool isSuccess = int.TryParse(userInput, out int inputNumber);

                if (inputNumber >= 0 && isSuccess == true)
                {
                    resalt = inputNumber;
                    isWork = false;
                }
                else
                {
                    Console.WriteLine("Не корректный ввод. Введите положительное число!");
                }
            }
            return resalt;
        }
    }
}
