using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace homeWork6_8
{
    class Program
    {
        static void Main(string[] args)
        {
            Arena arena = new Arena();
            bool isWork = true;

            while (isWork)
            {
                if (arena.TryCreateBattle())
                {
                    Console.WriteLine("Для начала боя нажмите любую кнопку!");
                    Console.ReadKey();
                    Console.Clear();
                    arena.Battle();
                    arena.ShowBattleResult();
                    isWork = false;
                }
            }
        }
    }

    class Arena
    {
        private Fighter _firstFighter;
        private Fighter _secondFighter;
        private List<Fighter> _fighters = new List<Fighter>();

        public Arena()
        {
            _fighters.Add(new Warrior("Воин", 300, 5, 25, 40));
            _fighters.Add(new Barbarian("Варвар", 200, 0, 30, 35));
            _fighters.Add(new Paladin("Паладин", 250, 10, 20, 30));
            _fighters.Add(new Mage("Маг", 220, 3, 35, 40));
            _fighters.Add(new Archer("Лучник", 250, 5, 30, 35));
        }

        public void Battle()
        {
            while (_firstFighter.Health > 0 && _secondFighter.Health > 0)
            {
                Console.WriteLine();
                _firstFighter.ShowAllStats();
                _secondFighter.ShowAllStats();
                _secondFighter.TakeDamage(_firstFighter.GenerateDamage(_firstFighter));
                _firstFighter.TakeDamage(_secondFighter.GenerateDamage(_secondFighter));
                Console.ReadKey();
            }
        }

        public bool TryCreateBattle()
        {
            ShowFighters();
            Console.WriteLine();
            Console.WriteLine("Первый боец:");
            ChooseFighter(out _firstFighter);
            Console.WriteLine();
            ShowFighters();
            Console.WriteLine("Второй боец:");
            ChooseFighter(out _secondFighter);

            if (_firstFighter == null || _secondFighter == null)
            {
                Console.WriteLine("Ошибка выбора бойца!");
                return false;
            }
            else
            {
                Console.WriteLine("Бойцы выбраны и готовы к бою!");
                return true;
            }
        }

        public void ShowBattleResult()
        {
            if (_firstFighter.Health <= 0 && _secondFighter.Health <= 0)
            {
                Console.WriteLine("Ничья! Погибли оба!");
            }
            else if (_firstFighter.Health <= 0)
            {
                Console.WriteLine(_firstFighter.Name + " - погиб, " + _secondFighter.Name + " - победил!");
            }
            else if (_secondFighter.Health <= 0)
            {
                Console.WriteLine(_secondFighter.Name + " - погиб, " + _firstFighter.Name + " - победил!");
            }
        }

        private void ChooseFighter(out Fighter fighter)
        {
            Console.WriteLine("Введите номер бойца, которого хотите выбрать:");
            bool isNumber = int.TryParse(Console.ReadLine(), out int result);

            if (isNumber == false)
            {
                Console.WriteLine("Не верный ввод! Введено не число!");
                fighter = null;
            }
            else if (result > 0 && result - 1 < _fighters.Count)
            {
                fighter = _fighters[result - 1];
                _fighters.Remove(fighter);
                Console.WriteLine("Боец выбран успешно!");
            }
            else
            {
                Console.WriteLine("Боец с таким номером отсутствует!");
                fighter = null;
            }

        }

        private void ShowFighters()
        {
            Console.WriteLine("Список всех доступных персонажей:");

            for (int i = 0; i < _fighters.Count; i++)
            {
                Console.Write(i + 1 + " - ");
                _fighters[i].ShowAllStats();
            }
        }
    }

    class Fighter
    {
        protected const int MinPercent = 1;
        protected const int MaxPercent = 101;
        protected int Tempdamage;
        private static readonly Random _random = new Random();
        public string Name { get; protected set; }
        public int Health { get; protected set; }
        public int Armor { get; protected set; }
        public int Damage { get; protected set; }
        public int ChanceExtraDamage { get; protected set; }

        public Fighter(string name, int health, int armor, int damage, int chanceExtraDamage)
        {
            Name = name;
            Health = health;
            Armor = armor;
            Damage = damage;
            ChanceExtraDamage = chanceExtraDamage;
        }

        public void TakeDamage(int damage)
        {
            Health -= damage - Armor;
        }

        public void ShowAllStats()
        {
            Console.WriteLine(Name + ", Урон: " + Damage + ", Здоровье: " + Health + ", Броня: " + Armor);
        }

        public void UseSpecialAttack()
        {
            SpecialAttack();
        }

        public virtual int GenerateDamage(Fighter fighter)
        {
            Tempdamage = 0;
            int tempNumber = _random.Next(MinPercent, MaxPercent);

            if (tempNumber <= ChanceExtraDamage)
            {
                SpecialAttack();
            }
            else
            {
                Tempdamage = Damage;
                Console.WriteLine(fighter.Name + " наносит " + Tempdamage + " урона");
            }
            return Tempdamage;
        }

        protected virtual void SpecialAttack() { }
    }

    class Warrior : Fighter
    {
        private const int IncreaseDamage = 3;
        public Warrior(string name, int health, int armor, int damage, int chanceExtraDamage) : base(name, health, armor, damage, chanceExtraDamage) { }

        protected override void SpecialAttack()
        {
            Tempdamage = Damage + (Damage / IncreaseDamage);
            Console.WriteLine("Воин делает серию ударов и наносит - " + Tempdamage + " урона!");
        }
    }

    class Barbarian : Fighter
    {
        private const int IncreaseDamage = 2;
        public Barbarian(string name, int health, int armor, int damage, int chanceExtraDamage) : base(name, health, armor, damage, chanceExtraDamage) { }

        protected override void SpecialAttack()
        {
            Tempdamage = Damage * IncreaseDamage;
            Console.WriteLine("Варвар испытывает жажду крови и наносит - " + Tempdamage + " урона!");
        }
    }

    class Paladin : Fighter
    {
        private const int ExtraHealth = 20;
        private const int IncreaseDamage = 2;
        public Paladin(string name, int health, int armor, int damage, int chanceExtraDamage) : base(name, health, armor, damage, chanceExtraDamage) { }

        protected override void SpecialAttack()
        {
            Tempdamage = Damage + (Damage / IncreaseDamage);
            Health += ExtraHealth;
            Console.WriteLine("Паладин совершает молитву и делает мощный удар на - " + Tempdamage + " урона! A также восстанавливает - " + ExtraHealth + " здоровья!");
        }
    }

    class Mage : Fighter
    {
        private const int IncreaseDamage = 3;
        public Mage(string name, int health, int armor, int damage, int chanceExtraDamage) : base(name, health, armor, damage, chanceExtraDamage) { }

        protected override void SpecialAttack()
        {
            Tempdamage = Damage + (Damage / IncreaseDamage);
            Console.WriteLine("Маг призывает ледяную бурю и наносит - " + Tempdamage + " урона!");
        }
    }

    class Archer : Fighter
    {
        private const int IncreaseDamage = 2;
        public Archer(string name, int health, int armor, int damage, int chanceExtraDamage) : base(name, health, armor, damage, chanceExtraDamage) { }

        protected override void SpecialAttack()
        {
            Tempdamage = Damage + (Damage / IncreaseDamage);
            Console.WriteLine("Лучник выпускает заряженную энергией стрелу и наносит - " + Tempdamage + " урона!");
        }
    }
}
