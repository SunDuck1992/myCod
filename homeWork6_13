using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace homeWork6_13._1
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Добро пожаловать в наш автосервис. Мы выявим вашу проблему и заменим неоходимые детали.\nВ случае их отсутствия вам будет выплачена компесация!\n");
            CarService carService = new CarService();
            carService.ServeClients();
        }
    }

    class Detail
    {
        public string Name { get; private set; }
        public int Price { get; private set; }
        public int InstallationCost { get; private set; }

        public Detail(string name, int price, int installationCost)
        {
            Name = name;
            Price = price;
            InstallationCost = installationCost;
        }
    }

    class Cell
    {
        private static readonly Random _random = new Random();

        public int Count { get; private set; }
        public Detail Detail { get; private set; }

        public Cell(Detail detail)
        {
            int minCount = 1;
            int maxCount = 5;
            Detail = detail;
            Count = _random.Next(minCount, maxCount);
        }

        public void ReduceCount()
        {
            Count--;
        }
    }

    class Car
    {
        public string Breakdown { get; private set; }

        public Car(string breakdown)
        {
            Breakdown = breakdown;
        }
    }

    class CarService
    {
        private static readonly Random _random = new Random();
        private List<Cell> _cells = new List<Cell>();
        private List<Car> _brokenCars = new List<Car>();
        private int _penaltyCoefficient = 3;

        public int Money { get; protected set; }

        public CarService()
        {
            FillDetails();
            CreateQueueCars();
        }

        public void ServeClients()
        {
            while (_brokenCars.Count > 0)
            {
                Car car = TakeCar();
                Cell cell = GetDetailForRepair(car);
                Console.WriteLine("На ремонт приехала новая машина, ее поломка - " + car.Breakdown + "\n");

                ShowAllDetails();

                Console.WriteLine();
                Console.WriteLine("Чтобы приступить к ремонту нажмите любую клавишу");
                Console.ReadKey();

                if (IsGetDetail(cell))
                {
                    Repair(cell);
                }
                else
                {
                    RefuseToRepair(cell);
                }

                Console.WriteLine("\nСчет автосервиса - " + Money);
                Console.ReadKey();
                Console.WriteLine();
                Console.Clear();
            }
            Console.WriteLine("Конец рабочего дня. Все машины обслужены!");
        }

        private bool IsGetDetail(Cell cell)
        {
            if(cell.Count > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        private Car TakeCar()
        {
            Car car = _brokenCars[_random.Next(0, _brokenCars.Count)];
            _brokenCars.Remove(car);
            return car;
        }

        private void RefuseToRepair(Cell cell)
        {
            int fine = (cell.Detail.Price + cell.Detail.InstallationCost) / _penaltyCoefficient;
            Console.WriteLine("\nДетали закончились\n");
            Console.WriteLine("Придется выплатить клиенту компенсацию - " + fine + " рублей!");
            Money -= fine;
        }

        private void Repair(Cell cell)
        {           
            cell.ReduceCount();

            Money += cell.Detail.Price +cell.Detail.InstallationCost;
            Console.WriteLine("\nМашина готова! Деталь заменена на новую.");
        }

        private Cell GetDetailForRepair(Car car)
        {           
            for (int i = 0; i < _cells.Count; i++)
            {
                if (car.Breakdown == _cells[i].Detail.Name)
                {                    
                    return _cells[i];
                }               
            }
            return null;
        }

        private void FillDetails()
        {
            _cells.Add(new Cell(new Detail("Фара", 1500, 300)));
            _cells.Add(new Cell(new Detail("Лобовое стекло", 3000, 1000)));
            _cells.Add(new Cell(new Detail("Боковое стекло", 1200, 700)));
            _cells.Add(new Cell(new Detail("Свечи зажигания", 2000, 200)));
            _cells.Add(new Cell(new Detail("Масляный фильтр", 500, 200)));
            _cells.Add(new Cell(new Detail("Топливный насос", 3000, 1200)));
            _cells.Add(new Cell(new Detail("Глушитель", 3500, 1500)));
            _cells.Add(new Cell(new Detail("Амортизатор", 800, 500)));
            _cells.Add(new Cell(new Detail("Рычаг подвески", 1700, 1100)));
            _cells.Add(new Cell(new Detail("Аккумулятор", 2500, 400)));
        }

        private void CreateQueueCars()
        {
            int minQueue = 15;
            int maxQueue = 20;
            int countCarsInQueue = _random.Next(minQueue, maxQueue);

            for (int i = 0; i < countCarsInQueue; i++)
            {
                _brokenCars.Add(new Car(IdentifyBrokenDetail()));
            }
        }

        private void ShowAllDetails()
        {
            Console.WriteLine("Список доступных запчастей:");

            foreach (var cell in _cells)
            {
                Console.WriteLine(cell.Detail.Name + ", цена запчасти - " + cell.Detail.Price + ", цена установки - " + cell.Detail.InstallationCost + ", кол - во на складе " + cell.Count);
            }
        }

        private string IdentifyBrokenDetail()
        {
            int minNumber = 0;
            int maxNumber = _cells.Count - 1;
            string brokenDetail = _cells[_random.Next(minNumber, maxNumber)].Detail.Name;
            return brokenDetail;
        }
    }
}
