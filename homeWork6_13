using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace homeWork6_13._1
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Добро пожаловать в наш автосервис. Мы выявим вашу проблему и заменим неоходимые детали.\nВ случае их отсутствия вам будет выплачена компесация!\n");
            CarService carService = new CarService();
            carService.FillDetails();
            carService.CreateQueueCars();
            carService.ServeClients();          
        }
    }

    class Detail
    {
        public string Name { get; private set; }
        public int Price { get; private set; }
        public int InstallationCost { get; private set; }

        public Detail(string name, int price, int installationCost)
        {
            Name = name;
            Price = price;
            InstallationCost = installationCost;
        }
    }

    class Warehouse
    {
        private static readonly Random _random = new Random();
        private int _minCount = 1;
        private int _maxCount = 5;

        public int Count { get; private set; }
        public Detail Detail { get; private set; }

        public Warehouse(Detail detail)
        {
            Detail = detail;
            Count = _random.Next(_minCount, _maxCount);
        }

        public void ReduceCount()
        {
            Count--;
        }
    }

    class Car 
    {
        public string Breakdown { get; private set; }

        public Car(string breakdown)
        {
            Breakdown = breakdown;           
        }
    }

    class CarService
    {
        private static readonly Random _random = new Random();
        private List<Warehouse> _details = new List<Warehouse>();
        private List<Car> _brokenCars = new List<Car>();
        private int _penaltyCoefficient = 3;

        public int Money { get; protected set; }

        public void FillDetails()
        {
            _details.Add(new Warehouse(new Detail("Фара", 1500, 300)));
            _details.Add(new Warehouse(new Detail("Лобовое стекло", 3000, 1000)));
            _details.Add(new Warehouse(new Detail("Боковое стекло", 1200, 700)));
            _details.Add(new Warehouse(new Detail("Свечи зажигания", 2000, 200)));
            _details.Add(new Warehouse(new Detail("Масляный фильтр", 500, 200)));
            _details.Add(new Warehouse(new Detail("Топливный насос", 3000, 1200)));
            _details.Add(new Warehouse(new Detail("Глушитель", 3500, 1500)));
            _details.Add(new Warehouse(new Detail("Амортизатор", 800, 500)));
            _details.Add(new Warehouse(new Detail("Рычаг подвески", 1700, 1100)));
            _details.Add(new Warehouse(new Detail("Аккумулятор", 2500, 400)));
        }

        public void CreateQueueCars()
        {
            int minQueue = 15;
            int maxQueue = 20;
            int countCarsInQueue = _random.Next(minQueue, maxQueue);

            for (int i = 0; i < countCarsInQueue; i++)
            {
                _brokenCars.Add(new Car(IdentifyBrokenDetail()));
            }
        }

        public void ServeClients()
        {
            while (_brokenCars.Count > 0)
            {
                Car car = _brokenCars[_random.Next(0, _brokenCars.Count)];
                _brokenCars.Remove(car);
                Console.WriteLine("На ремонт приехала новая машина, ее поломка - " + car.Breakdown + "\n");
                ShowAllDetails();

                for (int i = 0; i < _details.Count; i++)
                {
                    if (car.Breakdown == _details[i].Detail.Name)
                    {
                        Console.WriteLine("Чтобы приступить к ремонту нажмите любую клавишу\n");
                        Console.ReadKey();

                        if (_details[i].Count > 0)
                        {
                            Console.WriteLine("Машина готова! Деталь заменена на новую.");
                            _details[i].ReduceCount();
                            Money += _details[i].Detail.Price + _details[i].Detail.InstallationCost;
                        }
                        else
                        {
                            Console.WriteLine("Похоже на складе закончились необходимые детали!");
                            int fine = (_details[i].Detail.Price + _details[i].Detail.InstallationCost) / _penaltyCoefficient;
                            Console.WriteLine("Придется выплатить клиенту компенсацию - " + fine + " рублей!");
                            Money -= fine;
                        }
                        Console.WriteLine("Счет автосервиса - " + Money);
                        Console.ReadKey();
                        Console.WriteLine();
                        Console.Clear();
                    }
                }
            }
            Console.WriteLine("Конец рабочего дня. Все машины обслужены!");
        }

        private void ShowAllDetails()
        {
            Console.WriteLine("Список доступных запчастей:");

            foreach (var detail in _details)
            {
                Console.WriteLine(detail.Detail.Name + ", цена запчасти - " + detail.Detail.Price + ", цена установки - " + detail.Detail.InstallationCost + ", кол - во на складе " + detail.Count);
            }
        }

        private string IdentifyBrokenDetail()
        {
            int minNumber = 0;
            int maxNumber = _details.Count - 1;
            string brokenDetail = _details[_random.Next(minNumber, maxNumber)].Detail.Name;
            return brokenDetail;
        }
    }
}
